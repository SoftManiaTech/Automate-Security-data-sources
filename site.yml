---
- name: Configure AD DS and DNS on Windows Server 2022
  hosts: windows
  gather_facts: no
  tasks:
    - name: Install AD DS and DNS Roles
      win_feature:
        name:
          - AD-Domain-Services
          - DNS
        include_management_tools: yes
        state: present

    - name: Promote Server to Domain Controller
      win_domain:
        dns_domain_name: "SoftMania.test"
        domain_netbios_name: "SOFTMANIA"
        safe_mode_password: "SoftMania@123!"
        state: domain_controller
      register: domain_setup

    - name: Reboot after domain controller setup
      win_reboot:
      when: domain_setup.reboot_required
    
    - name: Check if AD and DNS Services are Running
      win_shell: "Get-Service -Name NTDS, DNS | Select-Object Name, Status"
      register: ad_dns_services

    - name: Display AD & DNS Service Status
      debug:
        var: ad_dns_services.stdout_lines

    - name: Check Domain Controllers
      win_shell: "Get-ADDomainController -Filter * | Select-Object Name, Domain, IPv4Address"
      register: domain_controllers

    - name: Display Domain Controllers
      debug:
        var: domain_controllers.stdout_lines

    - name: Verify DNS Resolution
      win_shell: "Resolve-DnsName SoftMania.test"
      register: dns_resolution
      ignore_errors: yes  # In case DNS is not resolving

    - name: Display DNS Resolution Results
      debug:
        var: dns_resolution.stdout_lines


  hosts: windows
  gather_facts: no
  tasks:
    - name: Create Multiple OUs in Active Directory
      win_shell: |
        $departments = @("IT Department", "HR Department", "Finance Department", "Marketing Department")
        foreach ($dept in $departments) {
            if (-not (Get-ADOrganizationalUnit -Filter "Name -eq '$dept'")) {
                New-ADOrganizationalUnit -Name $dept -Path "DC=SoftMania,DC=test" -ProtectedFromAccidentalDeletion $false
                Write-Output "Created OU: $dept"
            } else {
                Write-Output "OU already exists: $dept"
            }
        }
      register: ou_creation

    - name: Display OU Creation Results
      debug:
        var: ou_creation.stdout_lines

    - name: Create Users in Departments (IT, HR, Finance, Marketing)
      win_shell: |
        $users = @(
          @{Name='John Doe'; GivenName='John'; Surname='Doe'; SamAccountName='jdoe'; UPN='jdoe@SoftMania.test'; OU='IT Department'}
          @{Name='Alice Smith'; GivenName='Alice'; Surname='Smith'; SamAccountName='asmith'; UPN='asmith@SoftMania.test'; OU='HR Department'}
          @{Name='Robert Brown'; GivenName='Robert'; Surname='Brown'; SamAccountName='rbrown'; UPN='rbrown@SoftMania.test'; OU='Finance Department'}
          @{Name='Emily White'; GivenName='Emily'; Surname='White'; SamAccountName='ewhite'; UPN='ewhite@SoftMania.test'; OU='Marketing Department'}
        )
        
        foreach ($user in $users) {
          if (-not (Get-ADUser -Filter "SamAccountName -eq '$($user.SamAccountName)'")) {
            New-ADUser -Name $user.Name -GivenName $user.GivenName -Surname $user.Surname `
              -SamAccountName $user.SamAccountName -UserPrincipalName $user.UPN `
              -Path "OU=$($user.OU),DC=SoftMania,DC=test" `
              -AccountPassword (ConvertTo-SecureString 'SoftMania@123!' -AsPlainText -Force) -Enabled $true
            Write-Output "User '$($user.Name)' created in OU '$($user.OU)'"
          } else {
            Write-Output "User '$($user.SamAccountName)' already exists. Skipping..."
          }
        }
      register: user_creation

    - name: Display User Creation Status
      debug:
        var: user_creation.stdout_lines

    - name: Create Security Groups for Each Department
      win_shell: |
        $departments = @("IT Department", "HR Department", "Finance Department", "Marketing Department")
        
        foreach ($dept in $departments) {
          $groupName = "$dept Admins"
          if (-not (Get-ADGroup -Filter "Name -eq '$groupName'")) {
            New-ADGroup -Name $groupName -GroupScope Global -GroupCategory Security `
              -Path "OU=$dept,DC=SoftMania,DC=test"
            Write-Output "Created Security Group '$groupName'"
          } else {
            Write-Output "Security Group '$groupName' already exists"
          }
        }
      register: security_groups

    - name: Display Security Group Creation Status
      debug:
        var: security_groups.stdout_lines

    - name: Add Users to Their Respective Security Groups
      win_shell: |
        $userGroups = @{
          'jdoe' = 'IT Department Admins'
          'asmith' = 'HR Department Admins'
          'rbrown' = 'Finance Department Admins'
          'ewhite' = 'Marketing Department Admins'
        }
        
        foreach ($user in $userGroups.Keys) {
          Add-ADGroupMember -Identity $userGroups[$user] -Members $user
          Write-Output "User '$user' added to '$($userGroups[$user])' group"
        }
      register: add_users_to_groups

    - name: Display Group Membership Status
      debug:
        var: add_users_to_groups.stdout_lines

    - name: Create A Record (webserver → 172.31.86.18)
      win_shell: |
        if (-not (Get-DnsServerResourceRecord -ZoneName "SoftMania.test" -Name "webserver")) {
            Add-DnsServerResourceRecordA -Name "webserver" -ZoneName "SoftMania.test" -IPv4Address "172.31.86.18"
            Write-Output "A Record 'webserver' created successfully"
        } else {
            Write-Output "A Record 'webserver' already exists"
        }
      register: a_record

    - name: Display A Record Creation Results
      debug:
        var: a_record.stdout_lines

    - name: Create CNAME Record (alias → webserver.SoftMania.test)
      win_shell: |
        if (-not (Get-DnsServerResourceRecord -ZoneName "SoftMania.test" -Name "alias")) {
            Add-DnsServerResourceRecordCName -Name "alias" -ZoneName "SoftMania.test" -HostNameAlias "webserver.SoftMania.test"
            Write-Output "CNAME Record 'alias' created successfully"
        } else {
            Write-Output "CNAME Record 'alias' already exists"
        }
      register: cname_record

    - name: Display CNAME Record Creation Results
      debug:
        var: cname_record.stdout_lines

    - name: Create MX Record (mail exchange)
      win_shell: |
        if (-not (Get-DnsServerResourceRecord -ZoneName "SoftMania.test" -Name "@")) {
            Add-DnsServerResourceRecordMX -Name "@" -ZoneName "SoftMania.test" -MailExchange "mail.SoftMania.test" -Preference 10
            Write-Output "MX Record created successfully"
        } else {
            Write-Output "MX Record already exists"
        }
      register: mx_record

    - name: Display MX Record Creation Results
      debug:
        var: mx_record.stdout_lines

    - name: Verify All DNS Records
      win_shell: |
        Get-DnsServerResourceRecord -ZoneName "SoftMania.test"
      register: dns_records

    - name: Display All DNS Records
      debug:
        var: dns_records.stdout_lines

- name: Bulk Create 100 DNS, CNAME, MX DNS Records
  hosts: windows
  gather_facts: no
  tasks:
  
    - name: Create 100 DNS A Records
      win_shell: |
        $ZoneName = "SoftMania.test"

        for ($i=1; $i -le 100; $i++) {
            $RecordName = "host$i"
            $IPAddress = "192.168.1.$i"

            if (-not (Get-DnsServerResourceRecord -ZoneName $ZoneName -Name $RecordName -ErrorAction SilentlyContinue)) {
                Add-DnsServerResourceRecordA -ZoneName $ZoneName -Name $RecordName -IPv4Address $IPAddress -TimeToLive 01:00:00
                Write-Output "Created DNS A Record: $RecordName -> $IPAddress"
            } else {
                Write-Output "A Record $RecordName already exists. Skipping..."
            }
        }
        Write-Output "✅ 100 DNS A Records Created Successfully!"
      register: a_record_creation

    - name: Display A Record Creation Results
      debug:
        var: a_record_creation.stdout_lines

    - name: Verify Created A Records
      win_shell: |
        Get-DnsServerResourceRecord -ZoneName "SoftMania.test"
      register: verify_a_records

    - name: Display All DNS A Records
      debug:
        var: verify_a_records.stdout_lines

    - name: Create 100 CNAME Records
      win_shell: |
        $ZoneName = "SoftMania.test"

        for ($i=1; $i -le 100; $i++) {
            $CNAME_RecordName = "alias$i"
            $CNAME_Target = "server$i.$ZoneName"

            if (-not (Get-DnsServerResourceRecord -ZoneName $ZoneName -Name $CNAME_RecordName)) {
                Add-DnsServerResourceRecordCName -ZoneName $ZoneName -Name $CNAME_RecordName -HostNameAlias $CNAME_Target -TimeToLive 01:00:00
                Write-Output "Created DNS CNAME Record: $CNAME_RecordName -> $CNAME_Target"
            } else {
                Write-Output "CNAME Record $CNAME_RecordName already exists. Skipping..."
            }
        }
        Write-Output "✅ 100 CNAME DNS Records Created Successfully!"
      register: cname_creation

    - name: Display CNAME Creation Results
      debug:
        var: cname_creation.stdout_lines

    - name: Create 100 MX Records
      win_shell: |
        $ZoneName = "SoftMania.test"

        for ($i=1; $i -le 100; $i++) {
            $MX_RecordName = "mail$i"
            $MX_Target = "mailserver$i.$ZoneName"
            $MX_Preference = 10

            if (-not (Get-DnsServerResourceRecord -ZoneName $ZoneName -Name $MX_RecordName)) {
                Add-DnsServerResourceRecordMX -ZoneName $ZoneName -Name $MX_RecordName -MailExchange $MX_Target -Preference $MX_Preference -TimeToLive 01:00:00
                Write-Output "Created DNS MX Record: $MX_RecordName -> $MX_Target with priority $MX_Preference"
            } else {
                Write-Output "MX Record $MX_RecordName already exists. Skipping..."
            }
        }
        Write-Output "✅ 100 MX DNS Records Created Successfully!"
      register: mx_creation

    - name: Display MX Creation Results
      debug:
        var: mx_creation.stdout_lines

    - name: Verify Created CNAME and MX Records
      win_shell: |
        Get-DnsServerResourceRecord -ZoneName "SoftMania.test"
      register: verify_dns

    - name: Display All DNS Records
      debug:
        var: verify_dns.stdout_lines